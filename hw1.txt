public class Asteroid {
    private static Texture texture;
    private TextureRegion region;
    private Vector2 position;
    private float speedX;
    private float speedY;

    static {
        texture = new Texture("asteroids64.png");
    }

    public Vector2 getPosition() {
        return position;
    }

    public Asteroid() {
        this.region = new TextureRegion(texture,MathUtils.random(0,3)*64,0,64,64);
        this.position = new Vector2(1280+32, MathUtils.random(0, 720));
        this.speedX = MathUtils.random(150.0f, 350.0f);
        this.speedY = (position.y < 360?-1:1) * MathUtils.random(0, 150.0f);
    }

    public void render(SpriteBatch batch) {
        batch.draw(region, position.x - 32.0f, position.y - 32.0f);
    }

    public void update(float dt) {
        position.x -= speedX * dt;
        position.y -= speedY * dt;
        if (position.x < -32 || position.y < -32 || position.y > 752) {
            position.x = 1280+32;
            position.y = MathUtils.random(0, 720);
            speedX = MathUtils.random(150.0f, 350.0f);
            speedY = (position.y < 360?1:-1) * MathUtils.random(0, 150.0f);
        }

    }
}

public class Hero {
    private Texture texture;
    private Vector2 position;
    private float speed;

    public Vector2 getPosition() {
        return position;
    }

    public Hero() {
        texture = new Texture("ship64.png");
        position = new Vector2(640.0f, 360.0f);
        speed = 300.0f;
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, position.x - 32.0f, position.y - 32.0f);
    }

    public void update(float dt) {
        if (Gdx.input.isKeyPressed(Input.Keys.RIGHT)) {
            position.x += speed * dt;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.LEFT)) {
            position.x -= speed * dt;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.UP)) {
            position.y += speed * dt;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.DOWN)) {
            position.y -= speed * dt;
        }
        if (Gdx.input.isTouched()) {
            if (Gdx.input.getX() > position.x) {
                position.x += speed * dt;
            }
            if (Gdx.input.getX() < position.x) {
                position.x -= speed * dt;
            }
            if (720.0f - Gdx.input.getY() > position.y) {
                position.y += speed * dt;
            }
            if (720.0f - Gdx.input.getY() < position.y) {
                position.y -= speed * dt;
            }
        }
        if (position.x + 32 > 1280) {
            position.x = 1280-32;
        }
        if (position.x - 32 < 0){
            position.x =32;
        }
        if (position.y > 720) {
            position.y = 0;
        }
        if (position.y + 32 < 0) {
            position.y = 720;
        }
    }
}

public class MyGdxGame extends ApplicationAdapter {
    SpriteBatch batch;
    Background background;
    Hero hero;
    Asteroid asteroid;

    @Override
    public void create() {
        batch = new SpriteBatch();
        background = new Background();
        hero = new Hero();
        asteroid = new Asteroid();
    }

    @Override
    public void render() {
        float dt = Gdx.graphics.getDeltaTime();
        update(dt);
        Gdx.gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        batch.begin();
        background.render(batch);
        hero.render(batch);
        asteroid.render(batch);
        batch.end();
    }

    public void update(float dt) {
        background.update(dt);
        hero.update(dt);
        asteroid.update(dt);
        Vector2 posHero = hero.getPosition();
        Vector2 posAsteroid = asteroid.getPosition();
        if (posHero.dst(posAsteroid) < 64){
            asteroid = new Asteroid();
        }
    }

    @Override
    public void dispose() {
        batch.dispose();
    }
}
